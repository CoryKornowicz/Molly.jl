var documenterSearchIndex = {"docs":
[{"location":"api/#Molly-API","page":"API","title":"Molly API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The API reference can be found here.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Molly also re-exports StaticArrays.jl and Unitful.jl, making the likes of SVector and 1.0u\"nm\" available when you call using Molly.","category":"page"},{"location":"api/","page":"API","title":"API","text":"The visualize function is only available once you have called using GLMakie. Requires.jl is used to lazily load this code when GLMakie.jl is available, which reduces the dependencies of the package.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Order   = [:module, :type, :constant, :function, :macro]","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [Molly]\nPrivate = false\nOrder   = [:module, :type, :constant, :function, :macro]","category":"page"},{"location":"api/#Molly.AbstractCoupler","page":"API","title":"Molly.AbstractCoupler","text":"A way to keep properties of a system constant. Custom temperature and pressure couplers should sub-type this type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.AbstractCutoff","page":"API","title":"Molly.AbstractCutoff","text":"A general type of cutoff encoding the approximation used for a potential. Interactions can be parameterized by the cutoff behavior.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.AndersenThermostat","page":"API","title":"Molly.AndersenThermostat","text":"AndersenThermostat(temperature, coupling_const)\n\nRescale random velocities according to the Andersen thermostat.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.AngleType","page":"API","title":"Molly.AngleType","text":"AngleType(th0, cth)\n\nAn angle type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.Atom","page":"API","title":"Molly.Atom","text":"Atom(; <keyword arguments>)\n\nAn atom and its associated information. Properties unused in the simulation or in analysis can be left with their default values. The types used should be bits types if the GPU is going to be used.\n\nArguments\n\nindex::Int: the index of the atom in the system.\ncharge::C=0.0: the charge of the atom, used for electrostatic interactions.\nmass::M=0.0u\"u\": the mass of the atom.\nœÉ::S=0.0u\"nm\": the Lennard-Jones finite distance at which the inter-particle   potential is zero.\nœµ::E=0.0u\"kJ * mol^-1\": the Lennard-Jones depth of the potential well.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.AtomData","page":"API","title":"Molly.AtomData","text":"AtomData(atom_type, atom_name, res_number, res_name)\n\nData associated with an atom. Storing this separately allows the atom types to be bits types and hence work on the GPU.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.BondType","page":"API","title":"Molly.BondType","text":"BondType(b0, kb)\n\nA bond type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.CellListMapNeighborFinder","page":"API","title":"Molly.CellListMapNeighborFinder","text":"CellListMapNeighborFinder(; nb_matrix, matrix_14, n_steps, dist_cutoff, x0, unit_cell)\n\nFind close atoms by distance, and store auxiliary arrays for in-place threading. x0 and unit_cell  are optional initial coordinates and system unit cell that improve the first approximation of the cell list structure. The unit cell can be provided as a three-component vector of box sides on each direction, in which case the unit cell is considered OrthorhombicCell, or as a unit cell matrix, in which case the cell is considered a general TriclinicCell by the cell list algorithm.\n\nExample\n\njulia> coords\n15954-element Vector{SVector{3, Quantity{Float64, ùêã, Unitful.FreeUnits{(nm,), ùêã, nothing}}}}:\n [2.5193063341012127 nm, 3.907448346081021 nm, 4.694954671434135 nm]\n [2.4173958848835233 nm, 3.916034913604175 nm, 4.699661024574953 nm]\n ‚ãÆ\n [1.818842280373283 nm, 5.592152965227421 nm, 4.992100424805031 nm]\n [1.7261366568663976 nm, 5.610326185704369 nm, 5.084523386833478 nm]\n\njulia> box_size\n3-element SVector{3, Quantity{Float64, ùêã, Unitful.FreeUnits{(nm,), ùêã, nothing}}} with indices SOneTo(3):\n              5.676 nm\n             5.6627 nm\n             6.2963 nm\n\njulia> neighbor_finder = CellListMapNeighborFinder(\n           nb_matrix=s.neighbor_finder.nb_matrix, matrix_14=s.neighbor_finder.matrix_14, \n           n_steps=10, dist_cutoff=1.2u\"nm\",\n           x0 = coords, unit_cell = box_size\n       )\nCellListMapNeighborFinder{Quantity{Float64, ùêã, Unitful.FreeUnits{(nm,), ùêã, nothing}}, 3, Float64}\n  Size of nb_matrix = (15954, 15954)\n  n_steps = 10\n  dist_cutoff = 1.2 nm\n\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.CoordinateLogger","page":"API","title":"Molly.CoordinateLogger","text":"CoordinateLogger(n_steps; dims=3)\n\nLog the coordinates throughout a simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.Coulomb","page":"API","title":"Molly.Coulomb","text":"Coulomb(; cutoff, nl_only, weight_14, coulomb_const, force_unit, energy_unit)\n\nThe Coulomb electrostatic interaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.CoulombReactionField","page":"API","title":"Molly.CoulombReactionField","text":"CoulombReactionField(; dist_cutoff, solvent_dielectric, nl_only, weight_14,\n                        coulomb_const, force_unit, energy_unit)\n\nThe Coulomb electrostatic interaction modified using the reaction field approximation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.DistanceCutoff","page":"API","title":"Molly.DistanceCutoff","text":"DistanceCutoff(dist_cutoff)\n\nCutoff that sets the potential and force to be zero past a specified cutoff point.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.DistanceNeighborFinder","page":"API","title":"Molly.DistanceNeighborFinder","text":"DistanceNeighborFinder(; nb_matrix, matrix_14, n_steps, dist_cutoff)\n\nFind close atoms by distance.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.DistanceVecNeighborFinder","page":"API","title":"Molly.DistanceVecNeighborFinder","text":"DistanceVecNeighborFinder(; nb_matrix, matrix_14, n_steps, dist_cutoff)\n\nFind close atoms by distance in a GPU and differentiable safe manner.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.EnergyLogger","page":"API","title":"Molly.EnergyLogger","text":"EnergyLogger(n_steps)\n\nLog the total energy of the system throughout a simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.GeneralInteraction","page":"API","title":"Molly.GeneralInteraction","text":"A general interaction that will apply to all or most atom pairs. Custom general interactions should sub-type this type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.Gravity","page":"API","title":"Molly.Gravity","text":"Gravity(; G, nl_only)\n\nThe gravitational interaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.HarmonicAngle","page":"API","title":"Molly.HarmonicAngle","text":"HarmonicAngle(; i, j, k, th0, cth)\n\nA bond angle between three atoms.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.HarmonicBond","page":"API","title":"Molly.HarmonicBond","text":"HarmonicBond(; i, j, b0, kb)\n\nA harmonic bond between two atoms.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.Interaction","page":"API","title":"Molly.Interaction","text":"An interaction between atoms that contributes to forces on the atoms.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.LennardJones","page":"API","title":"Molly.LennardJones","text":"LennardJones(; cutoff, nl_only, lorentz_mixing, weight_14, force_unit, energy_unit, skip_shortcut)\n\nThe Lennard-Jones 6-12 interaction. The potential is given by\n\nV_ij(r_ij) = 4varepsilon_ij leftleft(fracsigma_ijr_ijright)^12 - left(fracsigma_ijr_ijright)^6right\n\nand the force on each atom by\n\nbeginaligned\nvecF_i = 24varepsilon_ij left(2fracsigma_ij^12r_ij^13 - fracsigma_ij^6r_ij^7right) fracvecr_ijr_ij \n= frac24varepsilon_ijr_ij^2 left2left(fracsigma_ij^6r_ij^6right)^2 -left(fracsigma_ijr_ijright)^6right vecr_ij\nendaligned\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.Logger","page":"API","title":"Molly.Logger","text":"A way to record a property, e.g. the temperature, throughout a simulation. Custom loggers should sub-type this type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.Mie","page":"API","title":"Molly.Mie","text":"Mie(; m, n, cutoff, nl_only, lorentz_mixing, force_unit, energy_unit, skip_shortcut)\n\nThe Mie generalized interaction. When m equals 6 and n equals 12 this is equivalent to the Lennard-Jones interaction.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.NeighborFinder","page":"API","title":"Molly.NeighborFinder","text":"A way to find near atoms to save on simulation time. Custom neighbor finders should sub-type this type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.NeighborList","page":"API","title":"Molly.NeighborList","text":"NeighborList()\nNeighborList(n, list)\n\nStructure to contain pre-allocated neighbor lists.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.NeighborListVec","page":"API","title":"Molly.NeighborListVec","text":"NeighborListVec(n, list)\n\nStructure to contain neighbor lists for broadcasting.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.NoCoupling","page":"API","title":"Molly.NoCoupling","text":"NoCoupling()\n\nPlaceholder coupler that does nothing.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.NoCutoff","page":"API","title":"Molly.NoCutoff","text":"NoCutoff()\n\nPlaceholder cutoff that does not alter forces or potentials.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.NoNeighborFinder","page":"API","title":"Molly.NoNeighborFinder","text":"NoNeighborFinder()\n\nPlaceholder neighbor finder that returns no neighbors. When using this neighbor finder, ensure that nl_only for the interactions is set to false.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.OpenMMAtomType","page":"API","title":"Molly.OpenMMAtomType","text":"OpenMMAtomType(class, element, mass, œÉ, œµ)\n\nAn OpenMM atom type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.OpenMMForceField","page":"API","title":"Molly.OpenMMForceField","text":"OpenMMForceField(ff_files...)\nOpenMMForceField(T, ff_files...)\nOpenMMForceField(atom_types, residue_types, bond_types, angle_types,\n                    torsion_types, torsion_order, weight_14_coulomb,\n                    weight_14_lj)\n\nAn OpenMM force field. Read one or more OpenMM force field XML files by passing them to the constructor.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.PeriodicTorsion","page":"API","title":"Molly.PeriodicTorsion","text":"PeriodicTorsion(; periodicities, phases, ks)\n\nA periodic torsion angle between four atoms.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.PeriodicTorsionType","page":"API","title":"Molly.PeriodicTorsionType","text":"PeriodicTorsionType(proper, periodicities, phases, ks)\n\nA periodic torsion type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.RBTorsion","page":"API","title":"Molly.RBTorsion","text":"RBTorsion(; i, j, k, l, f1, f2, f3, f4)\n\nA Ryckaert-Bellemans torsion angle between four atoms.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.RBTorsionType","page":"API","title":"Molly.RBTorsionType","text":"RBTorsionType(f1, f2, f3, f4)\n\nA Ryckaert-Bellemans torsion type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.ShiftedForceCutoff","page":"API","title":"Molly.ShiftedForceCutoff","text":"ShiftedForceCutoff(dist_cutoff)\n\nCutoff that shifts the force to be continuous at a specified cutoff point.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.ShiftedPotentialCutoff","page":"API","title":"Molly.ShiftedPotentialCutoff","text":"ShiftedPotentialCutoff(dist_cutoff)\n\nCutoff that shifts the potential to be continuous at a specified cutoff point.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.SoftSphere","page":"API","title":"Molly.SoftSphere","text":"SoftSphere(; cutoff, nl_only, lorentz_mixing, force_unit, energy_unit, skip_shortcut)\n\nThe soft-sphere potential.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.SpecificInteraction","page":"API","title":"Molly.SpecificInteraction","text":"A specific interaction between sets of specific atoms, e.g. a bond angle. Custom specific interactions should sub-type this type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.StormerVerlet","page":"API","title":"Molly.StormerVerlet","text":"StormerVerlet(; <keyword arguments>)\n\nThe St√∂rmer-Verlet integrator. In this case the velocities given to the simulator act as the previous step coordinates for the first step. Does not currently work with units or thermostats.\n\nArguments\n\ndt::T: the time step of the simulation.\ncoupling::C=NoCoupling(): the coupling which applies during the simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.StructureWriter","page":"API","title":"Molly.StructureWriter","text":"StructureWriter(n_steps, filepath, excluded_res=String[])\n\nWrite 3D output structures to the PDB file format throughout a simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.System","page":"API","title":"Molly.System","text":"System(; <keyword arguments>)\n\nA physical system to be simulated. Properties unused in the simulation or in analysis can be left with their default values. atoms, atoms_data, coords and velocities should have the same length. This is a sub-type of AbstractSystem from AtomsBase.jl and implements the interface described there.\n\nArguments\n\natoms::A: the atoms, or atom equivalents, in the system. Can be   of any type but should be a bits type if the GPU is used.\natoms_data::AD: other data associated with the atoms, allowing the atoms to   be bits types and hence work on the GPU.\ngeneral_inters::GI=(): the general interactions in the system, i.e.   interactions between all or most atoms such as electrostatics. Typically a   Tuple.\nspecific_inter_lists::SI=(): the specific interactions in the system,   i.e. interactions between specific atoms such as bonds or angles. Typically   a Tuple.\ncoords::C: the coordinates of the atoms in the system. Typically a   vector of SVectors of 2 or 3 dimensions.\nvelocities::V=zero(coords): the velocities of the atoms in the system.\nbox_size::B: the size of the box in which the simulation takes place.   Typically a SVector of 2 or 3 dimensions.\nneighbor_finder::NF=NoNeighborFinder(): the neighbor finder used to find   close atoms and save on computation.\nloggers::L=Dict{String, Logger}(): the loggers that record properties of   interest during a simulation.\nforce_unit::F=u\"kJ * mol^-1 * nm^-1\": the unit of force of the system.\nenergy_unit::E=u\"kJ * mol^-1\": the unit of energy of the system.\ngpu_diff_safe::Bool: whether to use the GPU implementation. Defaults to   isa(coords, CuArray).\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.TemperatureLogger","page":"API","title":"Molly.TemperatureLogger","text":"TemperatureLogger(n_steps)\nTemperatureLogger(T, n_steps)\n\nLog the temperature throughout a simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.TreeNeighborFinder","page":"API","title":"Molly.TreeNeighborFinder","text":"TreeNeighborFinder(; nb_matrix, matrix_14, n_steps, dist_cutoff)\n\nFind close atoms by distance using a tree search.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.VelocityLogger","page":"API","title":"Molly.VelocityLogger","text":"VelocityLogger(n_steps; dims=3)\n\nLog the velocities throughout a simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#Molly.VelocityVerlet","page":"API","title":"Molly.VelocityVerlet","text":"VelocityVerlet(; <keyword arguments>)\n\nThe velocity Verlet integrator.\n\nArguments\n\ndt::T: the time step of the simulation.\ncoupling::C=NoCoupling(): the coupling which applies during the simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#AtomsBase.velocity-Tuple{Any, Any}","page":"API","title":"AtomsBase.velocity","text":"velocity(mass, temperature; dims=3)\n\nGenerate a random velocity from the Maxwell-Boltzmann distribution.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.accelerations","page":"API","title":"Molly.accelerations","text":"accelerations(system, neighbors=nothing; parallel=true)\n\nCalculate the accelerations of all atoms using the general and specific interactions and Newton's second law.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.apply_coupling!-Tuple{System, Any, NoCoupling}","page":"API","title":"Molly.apply_coupling!","text":"apply_coupling!(system, simulator, coupling)\n\nApply a coupler to modify a simulation. Custom couplers should implement this function.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.displacements-Tuple{Any, Any}","page":"API","title":"Molly.displacements","text":"displacements(coords, box_size)\n\nGet the pairwise vector displacements of a set of coordinates, accounting for the periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.distances-Tuple{Any, Any}","page":"API","title":"Molly.distances","text":"distances(coords, box_size)\n\nGet the pairwise distances of a set of coordinates, accounting for the periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.energy","page":"API","title":"Molly.energy","text":"energy(s, neighbors=nothing)\n\nCompute the total energy of the system.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.find_neighbors","page":"API","title":"Molly.find_neighbors","text":"find_neighbors(s::System,\n                nf::CellListMapNeighborFinder,\n                current_neighbors=nothing,\n                step_n::Integer=0;\n                parallel::Bool=true)\n\nFind neighbors using CellListMap, without in-place updating. Should be called only the first time the cell lists are built. Modifies the mutable nf structure.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.find_neighbors-2","page":"API","title":"Molly.find_neighbors","text":"find_neighbors(system, neighbor_finder, current_neighbors=nothing, step_n=0; parallel=true)\n\nObtain a list of close atoms in a system. Custom neighbor finders should implement this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.force","page":"API","title":"Molly.force","text":"force(inter, coord_i, coord_j, atom_i, atom_j, box_size)\n\nCalculate the force between a pair of atoms due to a given interation type. Custom interaction types should implement this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.forces","page":"API","title":"Molly.forces","text":"forces(system, neighbors=nothing; parallel=true)\n\nCalculate the forces on all atoms using the general and specific interactions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.kinetic_energy-Tuple{System}","page":"API","title":"Molly.kinetic_energy","text":"kinetic_energy(s)\n\nCompute the kinetic energy of the system.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.log_property!","page":"API","title":"Molly.log_property!","text":"log_property!(logger, system, neighbors=nothing, step_n=0)\n\nLog a property of the system thoughout a simulation. Custom loggers should implement this function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.mass-Tuple{Atom}","page":"API","title":"Molly.mass","text":"mass(atom)\n\nThe mass of an atom.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.maxwell_boltzmann-Tuple{Any, Any}","page":"API","title":"Molly.maxwell_boltzmann","text":"maxwell_boltzmann(mass, temperature)\n\nGenerate a random speed along one dimension from the Maxwell-Boltzmann distribution.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.place_atoms-Tuple{Integer, Any, Any}","page":"API","title":"Molly.place_atoms","text":"place_atoms(n_atoms, box_size, min_dist; dims=3)\n\nObtain n_atoms 3D coordinates in a box with sides box_size where no two points are closer than min_dist, accounting for periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.place_diatomics-Tuple{Integer, Any, Any, Any}","page":"API","title":"Molly.place_diatomics","text":"place_diatomics(n_molecules, box_size, min_dist, bond_length; dims=3)\n\nObtain 3D coordinates for n_molecules diatomics in a box with sides box_size where no two points are closer than min_dist and the bond length is bond_length, accounting for periodic boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.potential_energy","page":"API","title":"Molly.potential_energy","text":"potential_energy(s, neighbors=nothing)\n\nCompute the potential energy of the system.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.rdf-Tuple{Any, Any}","page":"API","title":"Molly.rdf","text":"rdf(coords, box_size; npoints=200)\n\nGet the radial distribution function of a set of coordinates. This describes how density varies as a function of distance from each atom. Returns a list of distance bin centres and a list of the corresponding densities.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.readinputs-Tuple{Type, AbstractString, AbstractString}","page":"API","title":"Molly.readinputs","text":"readinputs(topology_file, coordinate_file; units=true)\nreadinputs(T, topology_file, coordinate_file; units=true)\n\nRead a Gromacs topology flat file, i.e. all includes collapsed into one file, and a Gromacs coordinate file. Returns the atoms, specific interaction lists, general interaction lists, neighbor finder, coordinates and box size. units determines whether the returned values have units.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.run_loggers!","page":"API","title":"Molly.run_loggers!","text":"run_loggers!(system, neighbors=nothing, step_n=0)\n\nRun the loggers associated with the system.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.setupsystem-Tuple{AbstractString, Any}","page":"API","title":"Molly.setupsystem","text":"setupsystem(coord_file, force_field; dist_cutoff=1.0u\"nm\")\n\nRead a coordinate file and apply a force field to it. Any file format readable by Chemfiles can be given. Returns the atoms, specific interaction lists, general interaction lists, neighbor finder, coordinates and box size.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.simulate!-Union{Tuple{S}, Tuple{D}, Tuple{System{D, S, false}, VelocityVerlet, Integer}} where {D, S}","page":"API","title":"Molly.simulate!","text":"simulate!(system, simulator, n_steps; parallel=true)\nsimulate!(system, simulator; parallel=true)\n\nRun a simulation on a system according to the rules of the given simulator. Custom simulators should implement this function.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.temperature-Union{Tuple{System{D, S, false}}, Tuple{S}, Tuple{D}} where {D, S}","page":"API","title":"Molly.temperature","text":"temperature(system)\n\nCalculate the temperature of a system from the kinetic energy of the atoms.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.ustripvec-Tuple{Any}","page":"API","title":"Molly.ustripvec","text":"ustripvec(x)\n\nBroadcasted form of ustrip from Unitful.jl, allowing e.g. ustripvec.(coords).\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.vector-Tuple{Any, Any, Any}","page":"API","title":"Molly.vector","text":"vector(c1, c2, box_size)\n\nDisplacement between two coordinate values, accounting for the bounding box. The minimum image convention is used, so the displacement is to the closest version of the coordinates accounting for the periodic boundaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.vector1D-Tuple{Any, Any, Any}","page":"API","title":"Molly.vector1D","text":"vector1D(c1, c2, side_length)\n\nDisplacement between two 1D coordinate values from c1 to c2, accounting for the bounding box. The minimum image convention is used, so the displacement is to the closest version of the coordinate accounting for the periodic boundaries.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.velocity_autocorr","page":"API","title":"Molly.velocity_autocorr","text":"velocity_autocorr(vl, first_ind, last_ind)\n\nCalculates the autocorrelation function of velocity from the velocity logger.  This helps characterize the similarity between velocities observed at different time instances.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.visualize","page":"API","title":"Molly.visualize","text":"visualize(coord_logger, box_size, out_filepath; <keyword arguments>)\n\nVisualize a simulation as an animation. This function is only available when GLMakie is imported. It can take a while to run, depending on the length and size of the simulation.\n\nArguments\n\nconnections=Tuple{Int, Int}[]: pairs of atoms indices to link with bonds.\nconnection_frames: the frames in which bonds are shown. Is a list of the   same length as the number of frames, where each item is a list of Bools of   the same length as connections. Defaults to always true.\ntrails::Integer=0: the number of preceding frames to show as transparent   trails.\nframerate::Integer=30: the frame rate of the animation.\ncolor=:purple: the color of the atoms. Can be a single color or a list of   colors of the same length as the number of atoms.\nconnection_color=:orange: the color of the bonds. Can be a single color or a   list of colors of the same length as connections.\nmarkersize=20.0: the size of the atom markers.\nlinewidth=2.0: the width of the bond lines.\ntransparency=true: whether transparency is active on the plot.\nkwargs...: other keyword arguments are passed to the plotting function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Molly.wrapcoords-Tuple{Any, Any}","page":"API","title":"Molly.wrapcoords","text":"wrapcoords(c, side_length)\n\nEnsure a 1D coordinate is within the simulation box and return the coordinate.\n\n\n\n\n\n","category":"method"},{"location":"api/#Molly.wrapcoordsvec-Tuple{Any, Any}","page":"API","title":"Molly.wrapcoordsvec","text":"wrapcoordsvec(c, box_size)\n\nEnsure a coordinate is within the simulation box and return the coordinate.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Molly-examples","page":"Examples","title":"Molly examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The best examples for learning how the package works are in the Molly documentation section. Here we give further examples, showing what you can do with the package. Each is a self-contained block of code. Made something cool yourself? Make a PR to add it to this page.","category":"page"},{"location":"examples/#Making-and-breaking-bonds","page":"Examples","title":"Making and breaking bonds","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"There is an example of mutable atom properties in the main docs, but what if you want to make and break bonds during the simulation? In this case you can use a GeneralInteraction to make, break and apply the bonds. The partners of the atom can be stored in the atom type. We make a logger to record when the bonds are present, allowing us to visualize them with the connection_frames keyword argument to visualize (this can take a while to plot).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Molly\nusing GLMakie\nusing LinearAlgebra\n\nstruct BondableAtom\n    i::Int\n    mass::Float64\n    œÉ::Float64\n    œµ::Float64\n    partners::Set{Int}\nend\n\nMolly.mass(ba::BondableAtom) = ba.mass\n\nstruct BondableInteraction <: GeneralInteraction\n    nl_only::Bool\n    prob_formation::Float64\n    prob_break::Float64\n    dist_formation::Float64\n    b0::Float64\n    kb::Float64\nend\n\nfunction Molly.force(inter::BondableInteraction,\n                        coord_i,\n                        coord_j,\n                        atom_i,\n                        atom_j,\n                        box_size)\n    # Break bonds randomly\n    if atom_j.i in atom_i.partners && rand() < inter.prob_break\n        delete!(atom_i.partners, atom_j.i)\n        delete!(atom_j.partners, atom_j.i)\n    end\n    # Make bonds between close atoms randomly\n    dr = vector(coord_i, coord_j, box_size)\n    r2 = sum(abs2, dr)\n    if r2 < inter.b0 * inter.dist_formation && rand() < inter.prob_formation\n        push!(atom_i.partners, atom_j.i)\n        push!(atom_j.partners, atom_j.i)\n    end\n    # Apply the force of a harmonic bond\n    if atom_j.i in atom_i.partners\n        c = inter.kb * (norm(dr) - inter.b0)\n        fdr = -c * normalize(dr)\n        return fdr\n    else\n        return zero(coord_i)\n    end\nend\n\nstruct BondLogger <: Logger\n    n_steps::Int\n    bonds::Vector{BitVector}\nend\n\nfunction Molly.log_property!(logger::BondLogger, s, neighbors, step_n)\n    if step_n % logger.n_steps == 0\n        bonds = BitVector()\n        for i in 1:length(s)\n            for j in 1:(i - 1)\n                push!(bonds, j in s.atoms[i].partners)\n            end\n        end\n        push!(logger.bonds, bonds)\n    end\nend\n\nn_atoms = 200\nbox_size = SVector(10.0, 10.0)\nn_steps = 2_000\ntemp = 0.01\n\natoms = [BondableAtom(i, 1.0, 0.1, 0.02, Set([])) for i in 1:n_atoms]\ncoords = place_atoms(n_atoms, box_size, 0.1; dims=2)\nvelocities = [velocity(1.0, temp; dims=2) for i in 1:n_atoms]\ngeneral_inters = (SoftSphere(nl_only=true), BondableInteraction(true, 0.1, 0.1, 1.1, 0.1, 2.0))\nneighbor_finder = DistanceNeighborFinder(nb_matrix=trues(n_atoms, n_atoms), n_steps=10, dist_cutoff=2.0)\nsimulator = VelocityVerlet(dt=0.02, coupling=AndersenThermostat(temp, 5.0))\n\nsys = System(\n    atoms=atoms,\n    general_inters=general_inters,\n    coords=coords,\n    velocities=velocities,\n    box_size=box_size,\n    neighbor_finder=neighbor_finder,\n    loggers=Dict(\"coords\" => CoordinateLogger(Float64, 20; dims=2),\n                    \"bonds\" => BondLogger(20, [])),\n    force_unit=NoUnits,\n    energy_unit=NoUnits,\n)\n\nsimulate!(sys, simulator, n_steps)\n\nconnections = Tuple{Int, Int}[]\nfor i in 1:length(sys)\n    for j in 1:(i - 1)\n        push!(connections, (i, j))\n    end\nend\n\nvisualize(sys.loggers[\"coords\"],\n            box_size,\n            \"sim_mutbond.mp4\";\n            connections=connections,\n            connection_frames=sys.loggers[\"bonds\"].bonds,\n            markersize=10.0)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: Mutable bond simulation)","category":"page"},{"location":"differentiable/#Differentiable-simulation-with-Molly","page":"Differentiable simulation","title":"Differentiable simulation with Molly","text":"","category":"section"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"note: Note\nThis section can be read as a standalone introduction to differentiable simulation with Molly, but makes more sense in the context of the Molly documentation.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"note: Note\nThe examples on this page have somewhat diverged from the main branch and will hopefully be updated soon.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"In the last few years, the deep learning revolution has broadened to include the paradigm of differentiable programming. The concept of using automatic differentiation to obtain exact gradients through physical simulations has many interesting applications, including parameterising force fields and training neural networks to describe atom potentials.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"There are some projects that explore differentiable molecular simulations, such as Jax, M.D. and DiffTaichi, or you can write your own algorithms in something like PyTorch. However Julia provides a strong suite of autodiff tools, with Zygote.jl allowing source-to-source transformations for much of the language. The differentiable branch of Molly lets you use the power of Zygote to obtain gradients through molecular simulations. It is not yet merged because it is experimental, untested, slow, liable to change, and only works for some parts of the main package.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"With those caveats in mind, it provides a neat way to run differentiable simulations using the same abstractions as the main package. In particular, you can define general and specific interactions, letting you move away from N-body simulations and describe molecular systems. This is possible with something like a PyTorch tensor, but the force functions quickly get complicated to write. It also lets you use neighbor lists and periodic boundary conditions, or add neural networks to your simulations.","category":"page"},{"location":"differentiable/#General-interactions","page":"Differentiable simulation","title":"General interactions","text":"","category":"section"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"First, we show how taking gradients through a simulation can be used to optimise an atom property in a Lennard-Jones gas. In this type of simulation each atom has a œÉ value that determines how close it likes to get to other atoms. We are going to find the œÉ value that results in a desired distance of each atom to its closest neighbor. First we need a function to obtain the mean distance of each atom to its closest neighbor:","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"using Molly\n\nfunction meanminseparation(final_coords, box_size)\n    n_atoms = length(final_coords)\n    sum_dists = 0.0\n    for i in 1:n_atoms\n        min_dist = 100.0\n        for j in 1:n_atoms\n            i == j && continue\n            dist = sqrt(sum(abs2, vector(final_coords[i], final_coords[j], box_size)))\n            min_dist = min(dist, min_dist)\n        end\n        sum_dists += min_dist\n    end\n    return sum_dists / n_atoms\nend","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Now we can set up and run the simulation in a similar way to that described in the Molly documentation. The difference is that we wrap the simulation in a loss function. This returns a single value that we want to obtain gradients with respect to, in this case the value of the above function at the end of the simulation. The Zygote.ignore() block allows us to ignore code for the purposes of obtaining gradients; you could add the visualize function there for example.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"using Zygote\nusing Format\n\ndist_true = 0.5\nscale_œÉ_to_dist = 2 ^ (1 / 6)\nœÉtrue = dist_true / scale_œÉ_to_dist\n\nn_atoms = 50\nn_steps = 250\nmass = 10.0\nbox_size = 3.0\ntimestep = 0.05\ntemp = 3.0\nsimulator = VelocityVerlet()\nneighbor_finder = DistanceNeighborFinder(ones(n_atoms, n_atoms), 10, 1.5)\nthermostat = FrictionThermostat(0.95)\ngeneral_inters = (LennardJones(true),)\nspecific_inter_lists = ()\ncoords = [box_size .* rand(SVector{3}) for i in 1:n_atoms]\nvelocities = [velocity(mass, temp) for i in 1:n_atoms]\n\nfunction loss(œÉ)\n    atoms = [Atom(\"\", \"\", 0, \"\", 0.0, mass, œÉ, 0.2) for i in 1:n_atoms]\n    loggers = Dict(\"coords\" => CoordinateLogger(1))\n\n    s = Simulation(\n        simulator=simulator,\n        atoms=atoms,\n        specific_inter_lists=specific_inter_lists,\n        general_inters=general_inters,\n        coords=coords,\n        velocities=velocities,\n        temperature=temp,\n        box_size=box_size,\n        neighbor_finder=neighbor_finder,\n        thermostat=thermostat,\n        loggers=loggers,\n        timestep=timestep,\n        n_steps=n_steps,\n    )\n\n    mms_start = meanminseparation(coords, box_size)\n    final_coords = simulate!(s)\n    mms_end = meanminseparation(final_coords, box_size)\n    loss_val = abs(mms_end - dist_true)\n\n    Zygote.ignore() do\n        printfmt(\"œÉ {:6.3f}  |  Mean min sep expected {:6.3f}  |  Mean min sep end {:6.3f}  |  Loss {:6.3f}  |  \",\n                    œÉ, œÉ * (2 ^ (1 / 6)), mms_end, loss_val)\n    end\n\n    return loss_val\nend","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"We use a simple friction thermostat that downscales velocities each step to avoid exploding gradients (see discussion below). Now we can obtain the gradient of loss with respect to the atom property œÉ.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"grad = gradient(loss, œÉtrue)[1]","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"We can use this gradient in a training loop to optimise œÉ, starting from an arbitrary value.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"function train()\n    œÉlearn = 0.60 / scale_œÉ_to_dist\n    n_epochs = 20\n\n    for epoch_n in 1:n_epochs\n        printfmt(\"Epoch {:>2}  |  \", epoch_n)\n        coords = [box_size .* rand(SVector{3}) for i in 1:n_atoms]\n        velocities = [velocity(mass, temp) for i in 1:n_atoms]\n        grad = gradient(loss, œÉlearn)[1]\n        printfmt(\"Grad {:6.3f}\\n\", grad)\n        œÉlearn -= grad * 1e-2\n    end\nend\n\ntrain()","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Epoch  1  |  œÉ  0.535  |  Mean min sep expected  0.600  |  Mean min sep end  0.594  |  Loss  0.094  |  Grad -2.702\nEpoch  2  |  œÉ  0.562  |  Mean min sep expected  0.630  |  Mean min sep end  0.617  |  Loss  0.117  |  Grad  0.871\nEpoch  3  |  œÉ  0.553  |  Mean min sep expected  0.621  |  Mean min sep end  0.605  |  Loss  0.105  |  Grad  1.110\nEpoch  4  |  œÉ  0.542  |  Mean min sep expected  0.608  |  Mean min sep end  0.591  |  Loss  0.091  |  Grad  0.970\nEpoch  5  |  œÉ  0.532  |  Mean min sep expected  0.597  |  Mean min sep end  0.578  |  Loss  0.078  |  Grad  1.058\nEpoch  6  |  œÉ  0.521  |  Mean min sep expected  0.585  |  Mean min sep end  0.567  |  Loss  0.067  |  Grad  1.157\nEpoch  7  |  œÉ  0.510  |  Mean min sep expected  0.572  |  Mean min sep end  0.555  |  Loss  0.055  |  Grad  1.035\nEpoch  8  |  œÉ  0.500  |  Mean min sep expected  0.561  |  Mean min sep end  0.543  |  Loss  0.043  |  Grad  1.052\nEpoch  9  |  œÉ  0.489  |  Mean min sep expected  0.549  |  Mean min sep end  0.529  |  Loss  0.029  |  Grad  1.082\nEpoch 10  |  œÉ  0.478  |  Mean min sep expected  0.537  |  Mean min sep end  0.517  |  Loss  0.017  |  Grad  1.109\nEpoch 11  |  œÉ  0.467  |  Mean min sep expected  0.524  |  Mean min sep end  0.504  |  Loss  0.004  |  Grad  1.036\nEpoch 12  |  œÉ  0.457  |  Mean min sep expected  0.513  |  Mean min sep end  0.493  |  Loss  0.007  |  Grad -1.018\nEpoch 13  |  œÉ  0.467  |  Mean min sep expected  0.524  |  Mean min sep end  0.504  |  Loss  0.004  |  Grad  1.031\nEpoch 14  |  œÉ  0.457  |  Mean min sep expected  0.513  |  Mean min sep end  0.493  |  Loss  0.007  |  Grad -1.054\nEpoch 15  |  œÉ  0.467  |  Mean min sep expected  0.524  |  Mean min sep end  0.504  |  Loss  0.004  |  Grad  1.033\nEpoch 16  |  œÉ  0.457  |  Mean min sep expected  0.513  |  Mean min sep end  0.493  |  Loss  0.007  |  Grad -1.058\nEpoch 17  |  œÉ  0.467  |  Mean min sep expected  0.525  |  Mean min sep end  0.504  |  Loss  0.004  |  Grad  1.034\nEpoch 18  |  œÉ  0.457  |  Mean min sep expected  0.513  |  Mean min sep end  0.493  |  Loss  0.007  |  Grad -1.061\nEpoch 19  |  œÉ  0.468  |  Mean min sep expected  0.525  |  Mean min sep end  0.505  |  Loss  0.005  |  Grad  1.033\nEpoch 20  |  œÉ  0.457  |  Mean min sep expected  0.513  |  Mean min sep end  0.494  |  Loss  0.006  |  Grad -1.044","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"The final value we get is 0.457, close to the theoretical value of 0.445 if all atoms have a neighbor at the minimum pairwise energy distance. The RDF looks as follows, with the purple line corresponding to the desired distance to the closest neighbor. (Image: LJ RDF)","category":"page"},{"location":"differentiable/#Specific-interactions","page":"Differentiable simulation","title":"Specific interactions","text":"","category":"section"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Next we look at obtaining gradients through simulations with specific interactions, e.g. bonds or angles between specified atoms. We will simulate two triatomic molecules and search for a minimum energy bond angle that gives a desired distance between the atoms at the end of the simulation.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"using Molly\nusing Zygote\nusing Format\nusing LinearAlgebra\n\ndist_true = 1.0\n\nn_steps = 150\nmass = 10.0\nbox_size = 3.0\ntimestep = 0.05\ntemp = 0.0\nintegrator = VelocityVerlet()\nneighbor_finder = NoNeighborFinder()\nthermostat = FrictionThermostat(0.6)\ngeneral_inters = (LennardJones(false),)\ncoords = [\n        SVector(0.8, 0.75, 1.5), SVector(1.5, 0.70, 1.5), SVector(2.3, 0.75, 1.5),\n        SVector(0.8, 2.25, 1.5), SVector(1.5, 2.20, 1.5), SVector(2.3, 2.25, 1.5)]\nn_atoms = length(coords)\nn_dims = length(first(coords))\nvelocities = [velocity(mass, temp; dims=n_dims) for i in coords]\n\nfunction loss(Œ∏)\n    atoms = [Atom(\"\", \"\", 0, \"\", 0.0, mass, 0.0, 0.0) for i in 1:n_atoms]\n    loggers = Dict(\"coords\" => CoordinateLogger(2; dims=n_dims))\n    specific_inter_lists = ([\n            HarmonicBond(1, 2, 0.7, 100.0), HarmonicBond(2, 3, 0.7, 100.0),\n            HarmonicBond(4, 5, 0.7, 100.0), HarmonicBond(5, 6, 0.7, 100.0)], [\n            HarmonicAngle(1, 2, 3, Œ∏, 10.0), HarmonicAngle(4, 5, 6, Œ∏, 10.0)])\n\n    s = Simulation(\n        simulator=integrator,\n        atoms=atoms,\n        specific_inter_lists=specific_inter_lists,\n        general_inters=general_inters,\n        coords=coords,\n        velocities=velocities,\n        temperature=temp,\n        box_size=box_size,\n        neighbor_finder=neighbor_finder,\n        thermostat=thermostat,\n        loggers=loggers,\n        timestep=timestep,\n        n_steps=n_steps,\n    )\n\n    final_coords = simulate!(s)\n    dist_end = 0.5 * (norm(vector(final_coords[1], final_coords[3], box_size)) +\n                        norm(vector(final_coords[4], final_coords[6], box_size)))\n    loss_val = abs(dist_end - dist_true) + 0.0 * sum(sum(final_coords))\n\n    Zygote.ignore() do\n        printfmt(\"Œ∏ {:5.1f}¬∞  |  Final dist {:4.2f}  |  Loss {:5.3f}  |  \",\n                    rad2deg(Œ∏), dist_end, loss_val)\n    end\n\n    return loss_val\nend\n\nfunction train()\n    Œ∏learn = deg2rad(110.0)\n    n_epochs = 20\n\n    for epoch_n in 1:n_epochs\n        printfmt(\"Epoch {:>2}  |  \", epoch_n)\n        coords = [\n            SVector(0.8, 0.75, 1.5), SVector(1.5, 0.74, 1.5), SVector(2.3, 0.75, 1.5),\n            SVector(0.8, 2.25, 1.5), SVector(1.5, 2.24, 1.5), SVector(2.3, 2.25, 1.5)]\n        velocities = [velocity(mass, temp; dims=n_dims) for i in 1:n_atoms]\n        grad = gradient(loss, Œ∏learn)[1]\n        printfmt(\"Grad {:6.3f}\\n\", round(grad, digits=2))\n        Œ∏learn -= grad * 5e-3\n    end\nend\n\ntrain()","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Epoch  1  |  Œ∏ 110.0¬∞  |  Final dist 1.15  |  Loss 0.147  |  Grad  3.080\nEpoch  2  |  Œ∏ 109.1¬∞  |  Final dist 1.14  |  Loss 0.141  |  Grad  3.400\nEpoch  3  |  Œ∏ 108.1¬∞  |  Final dist 1.13  |  Loss 0.134  |  Grad  3.570\nEpoch  4  |  Œ∏ 107.1¬∞  |  Final dist 1.13  |  Loss 0.126  |  Grad  3.750\nEpoch  5  |  Œ∏ 106.0¬∞  |  Final dist 1.12  |  Loss 0.119  |  Grad  3.950\nEpoch  6  |  Œ∏ 104.9¬∞  |  Final dist 1.11  |  Loss 0.110  |  Grad  4.150\nEpoch  7  |  Œ∏ 103.7¬∞  |  Final dist 1.10  |  Loss 0.101  |  Grad  4.370\nEpoch  8  |  Œ∏ 102.5¬∞  |  Final dist 1.09  |  Loss 0.092  |  Grad  4.600\nEpoch  9  |  Œ∏ 101.2¬∞  |  Final dist 1.08  |  Loss 0.082  |  Grad  4.840\nEpoch 10  |  Œ∏  99.8¬∞  |  Final dist 1.07  |  Loss 0.071  |  Grad  5.090\nEpoch 11  |  Œ∏  98.3¬∞  |  Final dist 1.06  |  Loss 0.059  |  Grad  5.340\nEpoch 12  |  Œ∏  96.8¬∞  |  Final dist 1.05  |  Loss 0.047  |  Grad  5.590\nEpoch 13  |  Œ∏  95.2¬∞  |  Final dist 1.03  |  Loss 0.034  |  Grad  5.840\nEpoch 14  |  Œ∏  93.5¬∞  |  Final dist 1.02  |  Loss 0.020  |  Grad  6.070\nEpoch 15  |  Œ∏  91.8¬∞  |  Final dist 1.01  |  Loss 0.005  |  Grad  6.290\nEpoch 16  |  Œ∏  90.0¬∞  |  Final dist 0.99  |  Loss 0.010  |  Grad -6.480\nEpoch 17  |  Œ∏  91.8¬∞  |  Final dist 1.01  |  Loss 0.005  |  Grad  6.350\nEpoch 18  |  Œ∏  90.0¬∞  |  Final dist 0.99  |  Loss 0.010  |  Grad -6.480\nEpoch 19  |  Œ∏  91.9¬∞  |  Final dist 1.01  |  Loss 0.006  |  Grad  6.340\nEpoch 20  |  Œ∏  90.0¬∞  |  Final dist 0.99  |  Loss 0.009  |  Grad -6.480","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"The final value we get is 90.0¬∞, close to the theoretical value of 91.2¬∞ which is obtainable from trigonometry. The final simulation looks like this: (Image: Angle simulation) In the presence of other forces this value would not be so trivially obtainable. We can record the gradients for different values of Œ∏:","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Œ∏s = collect(0:3:180)[2:end]\ngrads = Float64[]\n\nfor Œ∏ in Œ∏s\n    coords = [\n        SVector(0.8, 0.75, 1.5), SVector(1.5, 0.74, 1.5), SVector(2.3, 0.75, 1.5),\n        SVector(0.8, 2.25, 1.5), SVector(1.5, 2.24, 1.5), SVector(2.3, 2.25, 1.5)]\n    velocities = [velocity(mass, temp; dims=n_dims) for i in 1:n_atoms]\n    push!(grads, gradient(loss, deg2rad(Œ∏))[1])\nend","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"The plot of these shows that the gradient has the expected sign either side of the correct value. (Image: Angle gradient)","category":"page"},{"location":"differentiable/#Neural-network-potentials","page":"Differentiable simulation","title":"Neural network potentials","text":"","category":"section"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Since gradients can be computed with Zygote, Flux models can also be incorporated into simulations. Here we show a neural network in the force function, though they can also be used in other parts of the simulation. This example also shows how gradients for multiple parameters can be obtained, in this case the parameters of the neural network. The jump from single to multiple parameters is important because single parameters can be easily optimised using other approaches, whereas differentiable simulation is well-placed to optimise many parameters simultaneously.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"We set up three pseudo-atoms and train a network to imitate the Julia logo by moving the bottom two atoms:","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"using Molly\nusing Zygote\nusing Flux\nusing Format\nusing LinearAlgebra\n\ndist_true = 1.0f0\n\nmodel = Chain(\n    Dense(1, 5, relu),\n    Dense(5, 1, tanh)\n)\nps = params(model)\n\nstruct NNBond <: SpecificInteraction\n    i::Int\n    j::Int\nend\n\n# This method of defining the force is outdated compared to the master branch\nfunction Molly.force(coords, b::NNBond, s::Simulation)\n    ab = vector(coords[b.i], coords[b.j], s.box_size)\n    dist = Float32(norm(ab))\n    f = model([dist])[1] * normalize(ab)\n    return [b.i, b.j], [f, -f]\nend\n\nn_steps = 400\nmass = 10.0f0\nbox_size = 5.0f0\ntimestep = 0.02f0\ntemp = 0.0f0\nintegrator = VelocityVerlet()\nneighbor_finder = NoNeighborFinder()\nthermostat = FrictionThermostat(0.98f0)\ngeneral_inters = (LennardJones(false),) # Ignored due to atom parameters\ncoords = [SVector(2.3f0, 2.07f0), SVector(2.5f0, 2.93f0), SVector(2.7f0, 2.07f0)]\nn_atoms = length(coords)\nn_dims = length(first(coords))\nvelocities = zero(coords)\n\nfunction loss()\n    atoms = [Atom(\"\", \"\", 0, \"\", 0.0f0, mass, 0.0f0, 0.0f0) for i in 1:n_atoms]\n    loggers = Dict(\"coords\" => CoordinateLogger(10; dims=n_dims))\n    specific_inter_lists = ([NNBond(1, 3)],)\n\n    s = Simulation(\n        simulator=integrator,\n        atoms=atoms,\n        specific_inter_lists=specific_inter_lists,\n        general_inters=general_inters,\n        coords=coords,\n        velocities=velocities,\n        temperature=temp,\n        box_size=box_size,\n        neighbor_finder=neighbor_finder,\n        thermostat=thermostat,\n        loggers=loggers,\n        timestep=timestep,\n        n_steps=n_steps,\n    )\n\n    final_coords = simulate!(s)\n    dist_end = (norm(vector(final_coords[1], final_coords[2], box_size)) +\n                norm(vector(final_coords[2], final_coords[3], box_size)) +\n                norm(vector(final_coords[3], final_coords[1], box_size))) / 3\n    loss_val = abs(dist_end - dist_true)\n\n    Zygote.ignore() do\n        printfmt(\"Dist end {:6.3f}  |  Loss {:6.3f}\\n\", dist_end, loss_val)\n    end\n\n    return loss_val\nend","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Before training the result looks like this: (Image: Logo before)","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"function train()\n    n_epochs = 20\n    opt = ADAM(0.02, (0.9, 0.999))\n\n    for epoch_n in 1:n_epochs\n        coords = [SVector(2.3f0, 2.07f0), SVector(2.5f0, 2.93f0), SVector(2.7f0, 2.07f0)]\n        velocities = zero(coords)\n        printfmt(\"Epoch {:>2}  |  \", epoch_n)\n        Flux.train!(loss, ps, ((),), opt)\n    end\nend\n\ntrain()","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Epoch  1  |  Dist end  0.675  |  Loss  0.325\nEpoch  2  |  Dist end  0.715  |  Loss  0.285\nEpoch  3  |  Dist end  0.756  |  Loss  0.244\nEpoch  4  |  Dist end  0.793  |  Loss  0.207\nEpoch  5  |  Dist end  0.832  |  Loss  0.168\nEpoch  6  |  Dist end  0.874  |  Loss  0.126\nEpoch  7  |  Dist end  0.918  |  Loss  0.082\nEpoch  8  |  Dist end  0.963  |  Loss  0.037\nEpoch  9  |  Dist end  1.008  |  Loss  0.008\nEpoch 10  |  Dist end  1.036  |  Loss  0.036\nEpoch 11  |  Dist end  1.052  |  Loss  0.052\nEpoch 12  |  Dist end  1.060  |  Loss  0.060\nEpoch 13  |  Dist end  1.060  |  Loss  0.060\nEpoch 14  |  Dist end  1.054  |  Loss  0.054\nEpoch 15  |  Dist end  1.044  |  Loss  0.044\nEpoch 16  |  Dist end  1.029  |  Loss  0.029\nEpoch 17  |  Dist end  1.011  |  Loss  0.011\nEpoch 18  |  Dist end  0.990  |  Loss  0.010\nEpoch 19  |  Dist end  0.977  |  Loss  0.023\nEpoch 20  |  Dist end  0.971  |  Loss  0.029","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"After training it looks much better: (Image: Logo after) You could replace the simple network here with a much more complicated model and it would theoretically be able to train, even if it might prove practically difficult (see discussion below).","category":"page"},{"location":"differentiable/#Molecular-loss-functions","page":"Differentiable simulation","title":"Molecular loss functions","text":"","category":"section"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Ultimately, you need some objective function in order to calculate the gradient for each parameter. Here are some ideas for loss functions suitable for differentiable molecular simulations:","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"The distance between atoms at the end of the simulation compared to some reference state. This loss is used in the examples given here, is physically reasonable, and has obvious bounds.\nThe distance between atoms throughout the simulation.\nThe radial distribution function of atoms.\nRMSD between atoms and a reference state - this would be suitable for macromolecules.\ndRMSD, the distance between a distance map and a reference distance map.\nThe flexibility of a set of atoms over the simulation.\nSupramolecular geometry, for example assembly of molecules into straight fibres.\nThe correlation of different velocities over the simulation.\nThe energy of the system.\nThe temperature of the system.\nSome measure of phase change or a critical point.\nA combination of the above, for example to obtain a force field relevant to both ordered and disordered proteins.","category":"page"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Some of these are currently not possible in Molly as the loggers are ignored for gradient purposes, but this will hopefully change when Zygote gets mutation support.","category":"page"},{"location":"differentiable/#Tips-and-tricks","page":"Differentiable simulation","title":"Tips and tricks","text":"","category":"section"},{"location":"differentiable/","page":"Differentiable simulation","title":"Differentiable simulation","text":"Exploding gradients prove a problem when using the velocity Verlet integrator in the NVE ensemble. This is why a thermostat that downscales velocities was used in the above examples - presumably it decays the gradients to the level required for learning. It is likely that the development of suitable simulation strategies and thermostats will be necessary to unlock the potential of differentiable simulation.\nDo you really need a neural network to describe your potential? Think about learning a smaller number of physically-meaningful parameters before you put in a large neural network and expect it to learn. Whilst it is true that neural networks are universal function approximators, it does not follow that you will be able to train one by differentiating through  a long simulation. A 1000-step simulation with a 10-layer network at each step is analogous to training a 10,000 layer network (with shared weights).\nForward mode autodiff holds much promise for differentiable simulation, provided the number of parameters is small, because the memory requirement is constant in the number of simulation steps.","category":"page"},{"location":"#Molly.jl","page":"Home","title":"Molly.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Build status) (Image: Coverage status) (Image: Latest release) (Image: License) (Image: Documentation stable) (Image: Documentation dev)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Much of science can be explained by the movement and interaction of molecules. Molecular dynamics (MD) is a computational technique used to explore these phenomena, from noble gases to biological macromolecules. Molly.jl is a pure Julia package for MD, and for the simulation of physical systems more broadly.","category":"page"},{"location":"","page":"Home","title":"Home","text":"At the minute the package is a proof of concept for MD in Julia. It is not production ready. It can simulate a system of atoms with arbitrary interactions as defined by the user. Implemented features include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Interface to allow definition of new forces, simulators, thermostats, neighbor finders, loggers etc.\nRead in OpenMM force field files and coordinate files supported by Chemfiles.jl. There is also some support for Gromacs files.\nNon-bonded interactions - Lennard-Jones Van der Waals/repulsion force, electrostatic Coulomb potential, gravitational potential, soft sphere potential, Mie potential.\nBonded interactions - covalent bonds, bond angles, torsion angles.\nAndersen thermostat.\nVelocity Verlet and velocity-free Verlet integration.\nExplicit solvent.\nPeriodic boundary conditions in a cubic box.\nNeighbor list to speed up calculation of non-bonded forces.\nAutomatic multithreading.\nUnitful.jl compatibility so numbers have physical meaning.\nGPU acceleration on CUDA-enabled devices.\nRun with Float64 or Float32.\nSome analysis functions, e.g. RDF.\nPhysical agent-based modelling.\nVisualise simulations as animations.\nDifferentiable molecular simulation on an experimental branch - see the relevant docs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Features not yet implemented include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Energy minimisation.\nOther temperature or pressure coupling methods.\nProtein preparation - solvent box, add hydrogens etc.\nTrajectory/topology file format readers/writers.\nQuantum mechanical modelling.\nHigh test coverage.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia is required, with Julia v1.7 or later required to get the latest version of Molly. Install Molly from the Julia REPL. Enter the package mode by pressing ] and run add Molly.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some examples are given here, see the documentation for more on how to use the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simulation of a Lennard-Jones gas:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Molly\n\nn_atoms = 100\nbox_size = SVector(2.0, 2.0, 2.0)u\"nm\"\ntemp = 298u\"K\"\natom_mass = 10.0u\"u\"\n\natoms = [Atom(mass=atom_mass, œÉ=0.3u\"nm\", œµ=0.2u\"kJ * mol^-1\") for i in 1:n_atoms]\ncoords = place_atoms(n_atoms, box_size, 0.3u\"nm\")\nvelocities = [velocity(atom_mass, temp) for i in 1:n_atoms]\ngeneral_inters = (LennardJones(),)\nsimulator = VelocityVerlet(dt=0.002u\"ps\", coupling=AndersenThermostat(temp, 1.0u\"ps\"))\n\nsys = System(\n    atoms=atoms,\n    general_inters=general_inters,\n    coords=coords,\n    velocities=velocities,\n    box_size=box_size,\n    loggers=Dict(\"temp\" => TemperatureLogger(100)),\n)\n\nsimulate!(sys, simulator, 10_000)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simulation of a protein:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Molly\n\ntemp = 298u\"K\"\natoms, atoms_data, specific_inter_lists, general_inters, neighbor_finder, coords, box_size = readinputs(\n            joinpath(dirname(pathof(Molly)), \"..\", \"data\", \"5XER\", \"gmx_top_ff.top\"),\n            joinpath(dirname(pathof(Molly)), \"..\", \"data\", \"5XER\", \"gmx_coords.gro\"))\nsimulator = VelocityVerlet(dt=0.0002u\"ps\", coupling=AndersenThermostat(temp, 1.0u\"ps\"))\n\nsys = System(\n    atoms=atoms,\n    atoms_data=atoms_data,\n    general_inters=general_inters,\n    specific_inter_lists=specific_inter_lists,\n    coords=coords,\n    velocities=[velocity(a.mass, temp) for a in atoms],\n    box_size=box_size,\n    neighbor_finder=neighbor_finder,\n    loggers=Dict(\"temp\" => TemperatureLogger(10),\n                    \"writer\" => StructureWriter(10, \"traj_5XER_1ps.pdb\")),\n)\n\nsimulate!(sys, simulator, 5_000)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above 1 ps simulation looks something like this when you view it in VMD: (Image: MD simulation)","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are very welcome - see the roadmap issue for more.","category":"page"},{"location":"docs/#Molly-documentation","page":"Documentation","title":"Molly documentation","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"This documentation will first introduce the main features of the package with some examples, then will give details on each component of a simulation. There are further examples in the Molly examples section. For more information on specific types or functions, see the Molly API section or call ?function_name in Julia. The Differentiable simulation with Molly section describes taking gradients through simulations.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Molly takes a modular approach to molecular simulation. To run a simulation you create a System object and call simulate! on it. The different components of the system and simulation can be used as defined by the package, or you can define your own versions. An important principle of the package is that your custom components, particularly force functions, should be easy to define and just as performant as the built-in versions.","category":"page"},{"location":"docs/#Simulating-a-gas","page":"Documentation","title":"Simulating a gas","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Let's look at the simulation of a gas acting under the Lennard-Jones potential to start with. First, we'll need some atoms with the relevant parameters defined.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"using Molly\n\nn_atoms = 100\natom_mass = 10.0u\"u\"\natoms = [Atom(mass=atom_mass, œÉ=0.3u\"nm\", œµ=0.2u\"kJ * mol^-1\") for i in 1:n_atoms]","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"See the Unitful.jl docs for more information on the unit annotations. Molly re-exports Unitful.jl and StaticArrays.jl since they are usually required to run simulations. Next, we'll need some starting coordinates and velocities.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"box_size = SVector(2.0, 2.0, 2.0)u\"nm\"\ncoords = place_atoms(n_atoms, box_size, 0.3u\"nm\") # Random placement without clashing\n\ntemp = 100u\"K\"\nvelocities = [velocity(atom_mass, temp) for i in 1:n_atoms]","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"We store the coordinates and velocities as static arrays for performance. They can be of any number of dimensions and of any number type, e.g. Float64 or Float32. Now we can define our general interactions, i.e. those between most or all atoms. Because we have defined the relevant parameters for the atoms, we can use the built-in Lennard Jones type.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"general_inters = (LennardJones(),)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Finally, we can define the system and run the simulation. We use an Andersen thermostat to keep a constant temperature, and we log the temperature and coordinates every 10 steps. Periodic boundary conditions are used with the box we defined earlier.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"sys = System(\n    atoms=atoms,\n    general_inters=general_inters,\n    coords=coords,\n    velocities=velocities,\n    box_size=box_size,\n    loggers=Dict(\"temp\" => TemperatureLogger(10),\n                    \"coords\" => CoordinateLogger(10)),\n)\n\nsimulator = VelocityVerlet(dt=0.002u\"ps\", coupling=AndersenThermostat(temp, 1.0u\"ps\"))\nsimulate!(sys, simulator, 1_000)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"By default the simulation is run in parallel on the number of threads available to Julia, but this can be turned off by giving the keyword argument parallel=false to simulate!. An animation of the stored coordinates using can be saved using visualize, which is available when GLMakie.jl is imported.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"using GLMakie\nvisualize(s.loggers[\"coords\"], box_size, \"sim_lj.mp4\")","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"(Image: LJ simulation)","category":"page"},{"location":"docs/#GPU-acceleration","page":"Documentation","title":"GPU acceleration","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To run simulations on the GPU you will need to have a CUDA-compatible device and to have CUDA.jl installed. Simulation setup is similar to above, but with the coordinates, velocities and atoms moved to the GPU. This example also shows setting up a simulation to run with Float32, which is a good idea for GPUs.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"using Molly\nusing CUDA\n\nn_atoms = 100\natom_mass = 10.0f0u\"u\"\nbox_size = SVector(2.0f0, 2.0f0, 2.0f0)u\"nm\"\ntemp = 100.0f0u\"K\"\natoms = cu([Atom(mass=atom_mass, œÉ=0.3f0u\"nm\", œµ=0.2f0u\"kJ * mol^-1\") for i in 1:n_atoms])\ncoords = cu(place_atoms(n_atoms, box_size, 0.3u\"nm\"))\nvelocities = cu([velocity(atom_mass, temp) for i in 1:n_atoms])\nsimulator = VelocityVerlet(dt=0.002f0u\"ps\", coupling=NoCoupling())\n\nsys = System(\n    atoms=atoms,\n    general_inters=(LennardJones(),),\n    coords=coords,\n    velocities=velocities,\n    box_size=box_size,\n    loggers=Dict(\"temp\" => TemperatureLogger(typeof(1.0f0u\"K\"), 10),\n                    \"coords\" => CoordinateLogger(typeof(1.0f0u\"nm\"), 10)),\n)\n\nsimulate!(sys, simulator, 1_000)","category":"page"},{"location":"docs/#Simulating-diatomic-molecules","page":"Documentation","title":"Simulating diatomic molecules","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"If we want to define specific interactions between atoms, for example bonds, we can do. Using the same definitions as the first example, let's set up the coordinates so that paired atoms are 1 √Ö apart.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"coords = place_atoms(n_atoms √∑ 2, box_size, 0.3u\"nm\")\nfor i in 1:length(coords)\n    push!(coords, coords[i] .+ [0.1, 0.0, 0.0]u\"nm\")\nend\n\nvelocities = [velocity(atom_mass, temp) for i in 1:n_atoms]","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Now we can use the built-in bond type to place a harmonic constraint between paired atoms. The arguments are the indices of the two atoms in the bond, the equilibrium distance and the force constant.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"bonds = [HarmonicBond(i=i, j=(i + n_atoms √∑ 2), b0=0.1u\"nm\", kb=300_000.0u\"kJ * mol^-1 * nm^-2\") for i in 1:(n_atoms √∑ 2)]\n\nspecific_inter_lists = (bonds,)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"This time, we are also going to use a neighbor list to speed up the Lennard Jones calculation. We can use the built-in distance neighbor finder. The arguments are a 2D array of interaction weightings, the number of steps between each update and the cutoff to be classed as a neighbor.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"# All pairs apart from bonded pairs are eligible to interact\nnb_matrix = trues(n_atoms, n_atoms)\nfor i in 1:(n_atoms √∑ 2)\n    nb_matrix[i, i + (n_atoms √∑ 2)] = false\n    nb_matrix[i + (n_atoms √∑ 2), i] = false\nend\n\nneighbor_finder = DistanceNeighborFinder(nb_matrix=nb_matrix, n_steps=10, dist_cutoff=1.5u\"nm\")","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Now we can simulate as before.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"sys = System(\n    atoms=atoms,\n    general_inters=(LennardJones(nl_only=true),),\n    specific_inter_lists=specific_inter_lists,\n    coords=coords,\n    velocities=velocities,\n    box_size=box_size,\n    neighbor_finder=neighbor_finder,\n    loggers=Dict(\"temp\" => TemperatureLogger(10),\n                    \"coords\" => CoordinateLogger(10)),\n)\n\nsimulator = VelocityVerlet(dt=0.002u\"ps\", coupling=AndersenThermostat(temp, 1.0u\"ps\"))\nsimulate!(sys, simulator, 1_000)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"This time when we view the trajectory we can add lines to show the bonds.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"visualize(sys.loggers[\"coords\"], box_size, \"sim_diatomic.mp4\";\n            connections=[(i, i + (n_atoms √∑ 2)) for i in 1:(n_atoms √∑ 2)])","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"(Image: Diatomic simulation)","category":"page"},{"location":"docs/#Simulating-gravity","page":"Documentation","title":"Simulating gravity","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Molly is geared primarily to molecular simulation, but can also be used to simulate other physical systems. Let's set up a gravitational simulation. This example also shows the use of Float32, a 2D simulation and no specified units.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"atoms = [Atom(mass=1.0f0), Atom(mass=1.0f0)]\ncoords = [SVector(0.3f0, 0.5f0), SVector(0.7f0, 0.5f0)]\nvelocities = [SVector(0.0f0, 1.0f0), SVector(0.0f0, -1.0f0)]\ngeneral_inters = (Gravity(nl_only=false, G=1.5f0),)\nsimulator = VelocityVerlet(dt=0.002f0)\n\nsys = System(\n    atoms=atoms,\n    general_inters=general_inters,\n    coords=coords,\n    velocities=velocities,\n    box_size=SVector(1.0f0, 1.0f0),\n    loggers=Dict(\"coords\" => CoordinateLogger(Float32, 10; dims=2)),\n    force_unit=NoUnits,\n    energy_unit=NoUnits,\n)\n\nsimulate!(sys, simulator, 2_000)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"When we view the simulation we can use some extra options:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"visualize(sys.loggers[\"coords\"], 1.0f0, \"sim_gravity.mp4\";\n            trails=4, framerate=15, color=[:orange, :lightgreen])","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"(Image: Gravity simulation)","category":"page"},{"location":"docs/#Simulating-a-protein","page":"Documentation","title":"Simulating a protein","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The recommended way to simulate a macromolecular simulation is to read in a force field in OpenMM XML format and read in a coordinate file in a format supported by Chemfiles.jl. This sets up a system in the same data structures as above and is simulated in the same way. Here a StructureWriter is used to write the trajectory as a PDB file.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"ff = OpenMMForceField(\"ff99SBildn.xml\", \"tip3p_standard.xml\", \"his.xml\")\n\natoms, atoms_data, specific_inter_lists, general_inters, neighbor_finder, coords, box_size = setupsystem(\n    \"6mrr_equil.pdb\", ff)\nsimulator = VelocityVerlet(dt=0.0005u\"ps\")\n\nsys = System(\n    atoms=atoms,\n    atoms_data=atoms_data,\n    general_inters=general_inters,\n    specific_inter_lists=specific_inter_lists,\n    coords=coords,\n    velocities=[velocity(a.mass, 298u\"K\") for a in atoms],\n    box_size=box_size,\n    neighbor_finder=neighbor_finder,\n    loggers=Dict(\"energy\" => EnergyLogger(10),\n                    \"writer\" => StructureWriter(10, \"traj_5XER_1ps.pdb\", [\"HOH\"])),\n)\n\nsimulate!(sys, simulator, 5_000; parallel=true)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Molly also has a rudimentary parser of Gromacs topology and coordinate files.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"atoms, atoms_data, specific_inter_lists, general_inters, neighbor_finder, coords, box_size = readinputs(\n            joinpath(dirname(pathof(Molly)), \"..\", \"data\", \"5XER\", \"gmx_top_ff.top\"),\n            joinpath(dirname(pathof(Molly)), \"..\", \"data\", \"5XER\", \"gmx_coords.gro\"))\ntemp = 298u\"K\"\nsimulator = VelocityVerlet(dt=0.0002u\"ps\", coupling=AndersenThermostat(temp, 1.0u\"ps\"))\n\nsys = System(\n    atoms=atoms,\n    atoms_data=atoms_data,\n    general_inters=general_inters,\n    specific_inter_lists=specific_inter_lists,\n    coords=coords,\n    velocities=[velocity(a.mass, temp) for a in atoms],\n    box_size=box_size,\n    neighbor_finder=neighbor_finder,\n    loggers=Dict(\"temp\" => TemperatureLogger(10),\n                    \"writer\" => StructureWriter(10, \"traj_5XER_1ps.pdb\")),\n)\n\nsimulate!(sys, simulator, 5_000)","category":"page"},{"location":"docs/#Agent-based-modelling","page":"Documentation","title":"Agent-based modelling","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Agent-based modelling (ABM) is conceptually similar to molecular dynamics. Julia has Agents.jl for ABM, but Molly can also be used to simulate arbitrary agent-based systems in continuous space. Here we simulate a toy SIR model for disease spread. This example shows how atom properties can be mutable, i.e. change during the simulation, and includes custom forces and loggers (see below for more).","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"@enum Status susceptible infected recovered\n\n# Custom atom type\nmutable struct Person\n    i::Int\n    status::Status\n    mass::Float64\n    œÉ::Float64\n    œµ::Float64\nend\n\nMolly.mass(person::Person) = person.mass\n\n# Custom GeneralInteraction\nstruct SIRInteraction <: GeneralInteraction\n    nl_only::Bool\n    dist_infection::Float64\n    prob_infection::Float64\n    prob_recovery::Float64\nend\n\n# Custom force function\nfunction Molly.force(inter::SIRInteraction,\n                        coord_i,\n                        coord_j,\n                        atom_i,\n                        atom_j,\n                        box_size)\n    if (atom_i.status == infected && atom_j.status == susceptible) ||\n                (atom_i.status == susceptible && atom_j.status == infected)\n        # Infect close people randomly\n        dr = vector(coord_i, coord_j, box_size)\n        r2 = sum(abs2, dr)\n        if r2 < inter.dist_infection ^ 2 && rand() < inter.prob_infection\n            atom_i.status = infected\n            atom_j.status = infected\n        end\n    end\n    # Workaround to obtain a self-interaction\n    if atom_i.i == (atom_j.i + 1)\n        # Recover randomly\n        if atom_i.status == infected && rand() < inter.prob_recovery\n            atom_i.status = recovered\n        end\n    end\n    return zero(coord_i)\nend\n\n# Custom Logger\nstruct SIRLogger <: Logger\n    n_steps::Int\n    fracs_sir::Vector{Vector{Float64}}\nend\n\n# Custom logging function\nfunction Molly.log_property!(logger::SIRLogger, s, neighbors, step_n)\n    if step_n % logger.n_steps == 0\n        counts_sir = [\n            count(p -> p.status == susceptible, s.atoms),\n            count(p -> p.status == infected   , s.atoms),\n            count(p -> p.status == recovered  , s.atoms)\n        ]\n        push!(logger.fracs_sir, counts_sir ./ length(s))\n    end\nend\n\ntemp = 0.01\nbox_size = SVector(10.0, 10.0)\nn_steps = 1_000\nn_people = 500\nn_starting = 2\natoms = [Person(i, i <= n_starting ? infected : susceptible, 1.0, 0.1, 0.02) for i in 1:n_people]\ncoords = place_atoms(n_people, box_size, 0.1; dims=2)\nvelocities = [velocity(1.0, temp; dims=2) for i in 1:n_people]\ngeneral_inters = (LennardJones=LennardJones(nl_only=true), SIR=SIRInteraction(false, 0.5, 0.06, 0.01))\nneighbor_finder = DistanceNeighborFinder(nb_matrix=trues(n_people, n_people), n_steps=10, dist_cutoff=2.0)\nsimulator = VelocityVerlet(dt=0.02, coupling=AndersenThermostat(temp, 5.0))\n\nsys = System(\n    atoms=atoms,\n    general_inters=general_inters,\n    coords=coords,\n    velocities=velocities,\n    box_size=box_size,\n    neighbor_finder=neighbor_finder,\n    loggers=Dict(\"coords\" => CoordinateLogger(Float64, 10; dims=2),\n                    \"SIR\" => SIRLogger(10, [])),\n    force_unit=NoUnits,\n    energy_unit=NoUnits,\n)\n\nsimulate!(sys, simulator, n_steps)\n\nvisualize(sys.loggers[\"coords\"], box_size, \"sim_agent.mp4\"; markersize=10.0)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"(Image: Agent simulation)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"We can use the logger to plot the fraction of people susceptible (blue), infected (orange) and recovered (green) over the course of the simulation: (Image: Fraction SIR)","category":"page"},{"location":"docs/#Units","page":"Documentation","title":"Units","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Molly is fairly opinionated about using Unitful.jl units as shown above: you don't have to use them, but it is better if you do. Whilst you occasionally may run into friction with dimension mismatches, using units has the major advantages of catching whole classes of errors and letting you physically interpret the numbers in your system. The performance overhead of using units is minimal.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"All your interaction types need to return the same units of force and energy or the simulation will not run. By default these are kJ * mol^-1 * nm^-1 for force and kJ * mol^-1 for energy, but this can be changed using the force_unit and energy_unit arguments to System. If you need to strip units for downstream analysis, use the ustrip function. It should be noted that charges are stored as dimensionless, i.e. 1.0 is an atomic charge of +1.","category":"page"},{"location":"docs/#Forces","page":"Documentation","title":"Forces","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Forces define how different parts of the system interact. The force on each particle in the system is derived from the potential corresponding to the interaction.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"vecF_i = -sum_j fracdV_ij(r_ij)dr_ijfracvecr_ijr_ij","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"In Molly there are two types of interactions. GeneralInteractions are present between all or most atoms, and account for example for non-bonded terms. SpecificInteractions are present between specific atoms, and account for example for bonded terms.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The available general interactions are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"LennardJones.\nSoftSphere.\nMie.\nCoulomb.\nCoulombReactionField.\nGravity.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The available specific interactions are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"HarmonicBond.\nHarmonicAngle.\nPeriodicTorsion.\nRBTorsion.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To define your own GeneralInteraction, first define the struct:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"struct MyGeneralInter <: GeneralInteraction\n    nl_only::Bool\n    # Any other properties, e.g. constants for the interaction or cutoff parameters\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The nl_only property is required and determines whether the neighbor list is used to omit distant atoms (true) or whether all atom pairs are always considered (false). Next, you need to define the force function acting between a pair of atoms. This has a set series of arguments. For example:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"function Molly.force(inter::MyGeneralInter,\n                        coord_i,\n                        coord_j,\n                        atom_i,\n                        atom_j,\n                        box_size)\n    dr = vector(coord_i, coord_j, box_size)\n\n    # Replace this with your force calculation\n    # A positive force causes the atoms to move apart\n    f = 0.0\n\n    # Obtain a vector for the force\n    fdr = f * normalize(dr)\n    return fdr\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"If you need to obtain the vector from atom i to atom j, use the vector function. This gets the vector between the closest images of atoms i and j accounting for the periodic boundary conditions. Atom properties can be accessed, e.g. atom_i.œÉ. Typically the force function is where most computation time is spent during the simulation, so consider optimising this function if you want high performance.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To use your custom force, add it to the list of general interactions:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"general_inters = (MyGeneralInter(true),)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Then create a System and simulate as above. Note that you can also use named tuples instead of tuples if you want to access interactions by name:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"general_inters = (MyGeneralInter=MyGeneralInter(true),)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"For performance reasons it is best to avoid containers with abstract type parameters, such as Vector{GeneralInteraction}.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To define your own SpecificInteraction, first define the struct:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"struct MySpecificInter <: SpecificInteraction\n    # Any number of atoms involved in the interaction\n    i::Int\n    j::Int\n    # Any other properties, e.g. a bond distance corresponding to the energy minimum\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Next, you need to define the force function. For example:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"function Molly.force(inter::MySpecificInter, coords, box_size)\n    dr = vector(coords[inter.i], coords[inter.j], box_size)\n\n    # Replace this with your force calculation\n    # A positive force causes the atoms to move apart\n    f = 0.0\n\n    fdr = f * normalize(dr)\n    return [inter.i, inter.j], [-fdr, fdr]\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The return values are a list of the atom indices and a list of the vector forces. The example here is between two atoms but can be adapted for any number of atoms. To use your custom force, add it to the specific interaction lists:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"specific_inter_lists = ([MySpecificInter(1, 2), MySpecificInter(3, 4)],)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Specific interactions are always run on the CPU (with the results moved to the GPU if required), which is why we can index into coords and access s without harming performance.","category":"page"},{"location":"docs/#Cutoffs","page":"Documentation","title":"Cutoffs","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The total potential energy of a system is given as a sum of the individual inter-particle potentials","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"V(vecr_1 dotsc vecr_N) = sum_ijV_ij(r_ij)","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The forces acting on the particles are given by","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"vecF_i = -sum_j fracdV_ij(r_ij)dr_ijfracvecr_ijr_ij","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"In the case of the Lennard-Jones potential, the inter-particle potential is given by","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"V_ij(r_ij) = 4varepsilon_ij leftleft(fracsigma_ijr_ijright)^12 - left(fracsigma_ijr_ijright)^6right","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"and the forces are given by","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"beginaligned\nvecF_i = 24varepsilon_ij left(2fracsigma_ij^12r_ij^13 - fracsigma_ij^6r_ij^7right) fracvecr_ijr_ij \n= frac24varepsilon_ijr_ij^2 left2left(fracsigma_ij^6r_ij^6right)^2 -left(fracsigma_ijr_ijright)^6right vecr_ij\nendaligned","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"As the potential, and thus also the force decreases rapidly with the distance, in almost every implementation of the Lennard-Jones force calculation there is a cutoff radius beyond which the force is set to 0.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"While this is often a sensible approach, it introduces a discontinuity in the force function and it requires us to also modify the potential, as beyond the cutoff radius the force would be 0, but the derivative of the unmodified potential is not. One way to truncate the potential is to shift the potential by its cutoff value.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"beginaligned\nvecF_SP(vecr) = begincases\nvecF(vecr) r  r_c \n0 r  r_c\nendcases \nV_SP(r) = begincases\nV(r) - V(r_c) r le r_c \n0 r  r_c\nendcases\nendaligned","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"This way the potential function is continuous and the relation between forces and potentials is satisfied. This truncation method is called shifted potential cutoff.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Another option is to shift the force in order to make it continuous","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"beginaligned\nF_SF(r) = begincases\nF(r) - F(r_c) r le r_c \n0 r  r_c\nendcases \nV_SF(r) = begincases\nV(r) - (r-r_c) V(r_c) - V(r_c) r le r_c \n0 r  r_c\nendcases\nendaligned","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"This requires a more complicated change in the potential in order to satisfy the relation between them. This method is called the shifted force cutoff. The continuity of the force is desirable as it may give better energy conservation properties as shown in Toxvaerd 2011.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"There are also more complicated truncation methods that interpolate between the original potential and 0, but we will consider those two for the moment.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The truncation approximations that we use can significantly alter the qualitative features of the simulation as shown in many articles in the molecular dynamics literature (Fitzner 2017, van der Spoel 2006 and others).","category":"page"},{"location":"docs/#Implementation","page":"Documentation","title":"Implementation","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Since the truncation algorithm is independent of the interaction for which is used, each interaction is defined without including cutoffs. The corresponding interaction struct has a cutoff field which is then used via dispatch to apply the chosen cutoff. The available cutoffs are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"DistanceCutoff.\nShiftedPotentialCutoff.\nShiftedForceCutoff.","category":"page"},{"location":"docs/#Simulators","page":"Documentation","title":"Simulators","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Simulators define what type of simulation is run. This could be anything from a simple energy minimisation to complicated replica exchange MD. The available simulators are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"VelocityVerlet.\nStormerVerlet.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To define your own simulator, first define a struct:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"struct MySimulator\n    # Any properties, e.g. the time step or coupling methods\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Then, define the function that carries out the simulation. This example shows some of the helper functions you can use:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"function Molly.simulate!(sys::System,\n                            sim::MySimulator,\n                            n_steps::Integer;\n                            parallel::Bool=true)\n    # Find neighbors like this\n    neighbors = find_neighbors(sys, sys.neighbor_finder; parallel=parallel)\n\n    # Show a progress bar like this, if you have imported ProgressMeter\n    @showprogress for step_n in 1:n_steps\n        # Apply the loggers like this\n        run_loggers!(sys, neighbors, step_n)\n\n        # Calculate accelerations like this\n        accels_t = accelerations(sys, neighbors; parallel=parallel)\n\n        # Ensure coordinates stay within the simulation box like this\n        for i in 1:length(sys)\n            sys.coords[i] = wrapcoords.(sys.coords[i], sys.box_size)\n        end\n\n        # Apply coupling like this\n        apply_coupling!(sys, sim, sim.coupling)\n\n        # Find new neighbors like this\n        neighbors = find_neighbors(sys, sys.neighbor_finder, neighbors, step_n;\n                                    parallel=parallel)\n    end\n    return sys\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To use your custom simulator, give it as the second argument when calling simulate!.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Under the hood there are two implementations of common simulators: an in-place version geared towards CPUs, and an out-of-place version geared towards GPUs and differentiable simulation. You can define different versions of a simulator for in-place and out-of-place systems by dispatching on System{D, S, false} or System{D, S, true} respectively. This also applies to thermostats and neighbor lists. You do not have to define two versions though: you may only intend to use the simulator one way, or the out-of-place version may be performant in all cases. The above example is more similar to the in-place version; see the source code for an example of the out-of-place version.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The implementation to use is guessed when you call System based on whether coords is a CuArray, but can be given explicitly with the gpu_diff_safe argument.","category":"page"},{"location":"docs/#Coupling","page":"Documentation","title":"Coupling","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Temperature and pressure coupling allows properties to be controlled during a simulation. The available couplers are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"AndersenThermostat.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To define your own AbstractCoupler, first define the struct:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"struct MyCoupler <: AbstractCoupler\n    # Any properties, e.g. a target temperature or coupling constant\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Then, define the function that implements the coupling every time step:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"function apply_coupling!(sys::System, sim, coupling::MyCoupler)\n    # Do something to the simulation, e.g. scale the velocities\n    return sys\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The functions velocity, maxwell_boltzmann and temperature may be useful here. To use your custom coupler, give it as the coupling argument when calling simulate!.","category":"page"},{"location":"docs/#Neighbor-finders","page":"Documentation","title":"Neighbor finders","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Neighbor finders find close atoms periodically throughout the simulation, saving on computation time by allowing the force calculation between distant atoms to be omitted. The available neighbor finders are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"CellListMapNeighborFinder.\nTreeNeighborFinder.\nDistanceNeighborFinder.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To define your own NeighborFinder, first define the struct:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"struct MyNeighborFinder <: NeighborFinder\n    nb_matrix::BitArray{2}\n    matrix_14::BitArray{2}\n    n_steps::Int\n    # Any other properties, e.g. a distance cutoff\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Examples of three useful properties are given here: a matrix indicating atom pairs eligible for non-bonded interactions, a matrix indicating atoms in a 1-4 bonding arrangement, and a value determining how many time steps occur between each evaluation of the neighbor finder. Then, define the neighbor finding function that is called every step by the simulator:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"function find_neighbors(s::System,\n                        nf::MyNeighborFinder,\n                        current_neighbors=nothing,\n                        step_n::Integer=0;\n                        parallel::Bool=true)\n    if step_n % nf.n_steps == 0\n        if isnothing(current_neighbors)\n            neighbors = NeighborList()\n        else\n            neighbors = current_neighbors\n        end\n        empty!(neighbors)\n        # Add to neighbors, for example\n        push!(neighbors, (1, 2, false)) # atom i, atom j and whether they are in a 1-4 bonding arrangement\n        return neighbors\n    else\n        return current_neighbors\n    end\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To use your custom neighbor finder, give it as the neighbor_finder argument when creating the System.","category":"page"},{"location":"docs/#Loggers","page":"Documentation","title":"Loggers","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Loggers record properties of the simulation to allow monitoring and analysis. The available loggers are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"TemperatureLogger.\nCoordinateLogger.\nVelocityLogger.\nEnergyLogger.\nStructureWriter.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"To define your own Logger, first define the struct:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"struct MyLogger <: Logger\n    n_steps::Int\n    # Any other properties, e.g. an Array to record values during the trajectory\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Then, define the logging function that is called every step by the simulator:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"function Molly.log_property!(logger::MyLogger, s, neighbors, step_n)\n    if step_n % logger.n_steps == 0\n        # Record some property or carry out some action\n    end\nend","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"The use of n_steps is optional and is an example of how to record a property every n steps through the simulation. To use your custom logger, add it to the dictionary of loggers given when creating the System:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"loggers = Dict(\"mylogger\" => MyLogger(10))","category":"page"},{"location":"docs/#Analysis","page":"Documentation","title":"Analysis","text":"","category":"section"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Molly contains some tools for analysing the results of simulations. The available analysis functions are:","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"visualize.\nrdf.\ndistances.\ndisplacements.\nvelocity_autocorr.","category":"page"},{"location":"docs/","page":"Documentation","title":"Documentation","text":"Julia is a language well-suited to implementing all kinds of analysis for molecular simulations.","category":"page"}]
}
